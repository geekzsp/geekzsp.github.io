{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/icarus-bak/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"themes/icarus-bak/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"themes/icarus-bak/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus-bak/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"themes/icarus-bak/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus-bak/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/icarus-bak/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"themes/icarus-bak/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"themes/icarus-bak/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"themes/icarus-bak/source/img/thumbnail.svg","path":"img/thumbnail.svg","modified":0,"renderable":1},{"_id":"themes/icarus-bak/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/icarus-bak/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"themes/icarus-bak/source/js/main.js","path":"js/main.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/icarus/.eslintignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1587463661616},{"_id":"themes/icarus/.eslintrc.json","hash":"43c7740158c8690242720b4ff7fa11426fc20c79","modified":1587463661616},{"_id":"themes/icarus/.gitignore","hash":"36084c0851a22bfd393933abb8e262562ffc6802","modified":1587463661617},{"_id":"themes/icarus/.travis.yml","hash":"0a96b9f82de11bd524a74a3de9a32fd6cd6a6b47","modified":1587463661617},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1587463661617},{"_id":"themes/icarus/CONTRIBUTING.md","hash":"0a78b3eb68d41c22735df35447c392c0f3332ea5","modified":1587463661617},{"_id":"themes/icarus/README.md","hash":"c948b354de7161e51f4f87e33393295051d7a7c3","modified":1587463661617},{"_id":"themes/icarus/_config.yml","hash":"53838334c82c3b06f4270b8302b72761739734bb","modified":1587475863829},{"_id":"source/CNAME","hash":"69cdb7c40996c1c0cba14da2db3722373a3e6c54","modified":1587536894763},{"_id":"themes/icarus/package.json","hash":"9080de9f1223fe9906312a3f3b1096fe0eb82e38","modified":1587463661636},{"_id":"source/_posts/Git常用命令.md","hash":"56416532517f388ce0195279b5a0a45e5d4f974f","modified":1587457657826},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1587457657826},{"_id":"source/_posts/post-title-with-whitespace.md","hash":"8563cabceadc0f9789149eb66dd596bb53bb6d38","modified":1587457657826},{"_id":"source/_posts/test.md","hash":"4f73553f2440885cfa3090f9f8ddc88296afd8be","modified":1587457657826},{"_id":"source/_posts/接口与实现类动态切换的四种方式.md","hash":"5fbed3dbe26796a410af32c56973732e9115c1fe","modified":1587457657827},{"_id":"themes/icarus/.github/stale.yml","hash":"4771f82196ff95de48f9db4696ce316790f21865","modified":1587463661616},{"_id":"themes/icarus/include/config.js","hash":"13feb2c1ac64f5598f335985fb1ee4bc5e9389f1","modified":1587463661618},{"_id":"themes/icarus/include/dependency.js","hash":"3f84538fa2f528634a1f8254c49ab4c5ebfb19e7","modified":1587463661618},{"_id":"themes/icarus/include/register.js","hash":"90c55de6c114018e2ac517a2d469e2ea4cd193c5","modified":1587463661619},{"_id":"themes/icarus/languages/de.yml","hash":"79d769768780b9a72eb256ab61f217b8bdebf85b","modified":1587463661627},{"_id":"themes/icarus/languages/en.yml","hash":"792bc85571b0c16f591bb5455819793a02373017","modified":1587463661628},{"_id":"themes/icarus/languages/es.yml","hash":"2e59e579d393c881dcbb885516d93eeaf469cec2","modified":1587463661628},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1587463661628},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1587463661628},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1587463661628},{"_id":"themes/icarus/languages/ko.yml","hash":"e7ac736b604429adedd67f3ca6043201eff7b23b","modified":1587463661628},{"_id":"themes/icarus/languages/pl.yml","hash":"43f5447c38c9be2e1f5ce6181a0f97eeb437b059","modified":1587463661628},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1587463661629},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1587463661629},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1587463661629},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1587463661629},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"2f21370cb9aaa7bbe4f362618df450d7bc571a63","modified":1587463661629},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"9172121b0ec3d78861fa6ccdd6396cef90fabdc7","modified":1587463661629},{"_id":"themes/icarus/layout/archive.jsx","hash":"09c58b8e431445f1b40f2b19bc03ebc1a07a2a43","modified":1587463661629},{"_id":"themes/icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1587463661629},{"_id":"themes/icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1587463661630},{"_id":"themes/icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1587463661633},{"_id":"themes/icarus/layout/layout.jsx","hash":"7af4dc056e1b4ee5deae7294fe247d786a5c58db","modified":1587475897840},{"_id":"themes/icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1587463661634},{"_id":"themes/icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1587463661635},{"_id":"themes/icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1587463661635},{"_id":"themes/icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1587463661635},{"_id":"themes/icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":1587463661636},{"_id":"themes/icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587463661630},{"_id":"themes/icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587463661633},{"_id":"themes/icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587463661634},{"_id":"themes/icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587463661635},{"_id":"themes/icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587463661635},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/bug_report.md","hash":"e2426853cb623d500021011820bea4726341a3d2","modified":1587463661616},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/feature_request.md","hash":"0cbf106d95bf9991d850671a9e804f74a1783caa","modified":1587463661616},{"_id":"themes/icarus/.github/PULL_REQUEST_TEMPLATE/pull_request_template.md","hash":"001de87a96271fd7676fbf0fef090369369c2cc4","modified":1587463661616},{"_id":"themes/icarus/include/migration/head.js","hash":"cca7d3a828427cbdd5cbc6a93e501a4fea1c72fd","modified":1587463661619},{"_id":"themes/icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":1587463661619},{"_id":"themes/icarus/include/schema/config.json","hash":"f91dc103f4a95c870b4d6824dfe005289db5e309","modified":1587463661622},{"_id":"themes/icarus/include/style/article.styl","hash":"0e8c3a5cf40875d4f129a4531fd47aa158d4abe7","modified":1587463661624},{"_id":"themes/icarus/include/style/base.styl","hash":"ea038ebd8dcd442e54814e7529aa0ec5d4991977","modified":1587463661624},{"_id":"themes/icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1587463661624},{"_id":"themes/icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1587463661624},{"_id":"themes/icarus/include/style/codeblock.styl","hash":"44060ec764f12806bb67a6ae450e991c46adf7d0","modified":1587463661625},{"_id":"themes/icarus/include/style/donate.styl","hash":"acf06ddda9ae3f671f6237fbd059360f631a3ef7","modified":1587463661625},{"_id":"themes/icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1587463661625},{"_id":"themes/icarus/include/style/helper.styl","hash":"f6fe487415914dc6eb1ce10f53b1ab64eeba07ed","modified":1587463661626},{"_id":"themes/icarus/include/style/navbar.styl","hash":"ecc73c8ad504c0fa4bb910eb51500c14e0a8d662","modified":1587463661626},{"_id":"themes/icarus/include/style/pagination.styl","hash":"748c4fa46a6e2ec73bda213bb966bb2ee840c095","modified":1587463661626},{"_id":"themes/icarus/include/style/plugin.styl","hash":"821748cda47f46e54e0ca12ee0974342c49625ba","modified":1587463661626},{"_id":"themes/icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1587463661626},{"_id":"themes/icarus/include/style/search.styl","hash":"a8876f24d33075e52565ab070f61e453a358d5df","modified":1587463661627},{"_id":"themes/icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1587463661627},{"_id":"themes/icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1587463661627},{"_id":"themes/icarus/layout/common/article.jsx","hash":"f858a8ef0116ec1dc8716a1f1dd16b307cbaa95e","modified":1587463661630},{"_id":"themes/icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":1587463661630},{"_id":"themes/icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":1587463661630},{"_id":"themes/icarus/layout/common/footer.jsx","hash":"f0533a1767cbe11f47f96c0b07eb4b446f3374ce","modified":1587463661631},{"_id":"themes/icarus/layout/common/head.jsx","hash":"64b5c10c1d93bbf0659a04d78a4ecd8b2672c406","modified":1587463661631},{"_id":"themes/icarus/layout/common/navbar.jsx","hash":"ada3968a846a3878009f1b5683346de09509297a","modified":1587463661631},{"_id":"themes/icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":1587463661632},{"_id":"themes/icarus/layout/common/scripts.jsx","hash":"677857a166ad8fd1fec74d869a056348bf2d6800","modified":1587463661632},{"_id":"themes/icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":1587463661632},{"_id":"themes/icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":1587463661632},{"_id":"themes/icarus/layout/common/widgets.jsx","hash":"d3d3cbe292793ffc8be2a10fd37e8e38ffb2f077","modified":1587475945625},{"_id":"themes/icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1587463661634},{"_id":"themes/icarus/layout/plugin/back_to_top.jsx","hash":"54d5a7606e80f76f7492a690eb65d5b5e03b615a","modified":1587463661634},{"_id":"themes/icarus/layout/widget/profile.jsx","hash":"ba594611e8227975e3f2ce0d24a7856ab9427bd8","modified":1587463661636},{"_id":"themes/icarus/source/css/cyberpunk.styl","hash":"4f67ae0b413c1b0286452d607ca646c4fe717f62","modified":1587463661637},{"_id":"themes/icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1587463661637},{"_id":"themes/icarus/source/css/style.styl","hash":"be5d28ba5098e36483d21f94e4deb0bd2ec075e4","modified":1587463661637},{"_id":"themes/icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1587463661637},{"_id":"themes/icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1587463661638},{"_id":"themes/icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1587463661638},{"_id":"themes/icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1587463661639},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1587463661639},{"_id":"themes/icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1587463661639},{"_id":"themes/icarus/source/img/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1587463661639},{"_id":"themes/icarus/source/js/.eslintrc.json","hash":"6bf0641cb69dffac97f69baea192d7fa3ab612cb","modified":1587463661640},{"_id":"themes/icarus/source/js/back_to_top.js","hash":"0f071e2331e39043529041322c4812bb13a3990d","modified":1587463661640},{"_id":"themes/icarus/source/js/animation.js","hash":"59a05568fd5718513792b0d48bcb4bcf7eaa20e8","modified":1587463661640},{"_id":"themes/icarus/source/js/main.js","hash":"3fb6be34945798cd400825e021c4267856fff2df","modified":1587463661640},{"_id":"themes/icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587463661619},{"_id":"themes/icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587463661622},{"_id":"themes/icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587463661622},{"_id":"themes/icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587463661623},{"_id":"themes/icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587463661623},{"_id":"themes/icarus/include/hexo/generator/category.js","hash":"d7e7779d5afd8d4e2b0cf9a15feed84c0ea42590","modified":1587463661618},{"_id":"themes/icarus/include/hexo/generator/insight.js","hash":"0af168e624af01c930b4c3aaecc3af2e2dc18871","modified":1587463661618},{"_id":"themes/icarus/include/schema/common/article.json","hash":"37704130789d44c313e03c9dacb809a57274c06f","modified":1587463661620},{"_id":"themes/icarus/include/schema/common/comment.json","hash":"bd30bd9ffc84e88e704384acdfcaab09019a744f","modified":1587463661620},{"_id":"themes/icarus/include/schema/common/donates.json","hash":"e6b655f5f4af8958efd23137e96de35426e01a77","modified":1587463661620},{"_id":"themes/icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":1587463661620},{"_id":"themes/icarus/include/schema/common/navbar.json","hash":"df708bc8a25d4eeec268969f014ad99f9e74ef7a","modified":1587463661620},{"_id":"themes/icarus/include/schema/common/head.json","hash":"49a2a8c0508bad9446868c3c05e7fa3250855af8","modified":1587463661620},{"_id":"themes/icarus/include/schema/common/plugins.json","hash":"0217f2af8a4d6731652a3a49b5801bbfe0e73fff","modified":1587463661620},{"_id":"themes/icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1587463661621},{"_id":"themes/icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1587463661621},{"_id":"themes/icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1587463661621},{"_id":"themes/icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1587463661621},{"_id":"themes/icarus/include/schema/common/widgets.json","hash":"d000b4d1d09bdd64756265aa4cd2ea980ab7ddc7","modified":1587463661622},{"_id":"themes/icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1587463661622},{"_id":"themes/icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1587463661623},{"_id":"themes/icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1587463661624},{"_id":"public/js/algolia.js","hash":"cbfc4355b23d84d2f0dc622e069b3f06c0d10f70","modified":1587537227978},{"_id":"public/js/google_cse.js","hash":"55e7250f4a12bf15220ba5d1d49c91fda5fbd3b4","modified":1587537227978},{"_id":"public/js/insight.js","hash":"78b74ae77f1e854089ccabd871d581dc391fcc29","modified":1587537227978},{"_id":"public/content.json","hash":"cd2b282b5c08f8d1704e4d9db1500cbaef841d38","modified":1587537227978},{"_id":"public/2020/04/21/test/index.html","hash":"3b165d085f51775d22a93198771894c1fd0a517c","modified":1587537227978},{"_id":"public/2019/10/25/post-title-with-whitespace/index.html","hash":"a7135d99fcffc0b66db87e65d3e22e4ab0696a8a","modified":1587537227978},{"_id":"public/archives/index.html","hash":"bfa4e49b2ce91b2a320d9c76d4d20a4dbe729551","modified":1587537227978},{"_id":"public/archives/2019/index.html","hash":"f0c93792e366ddddf05245f1cd0808af382a9955","modified":1587537227978},{"_id":"public/archives/2019/10/index.html","hash":"c637b5fb45ce4a5709506cd88fb29930c20251f3","modified":1587537227978},{"_id":"public/archives/2019/11/index.html","hash":"df9c441c495673bde9f512db0fb0114f1b9e4ad1","modified":1587537227978},{"_id":"public/archives/2020/index.html","hash":"310772d89f51efb2102dc3fff78e200cf39ea926","modified":1587537227978},{"_id":"public/archives/2020/04/index.html","hash":"cf653948a2d8637ed1f7087bb00a1db8ef6fd4ab","modified":1587537227978},{"_id":"public/categories/index.html","hash":"384bd0d77808ee54255977d74baf235caeedd748","modified":1587537227978},{"_id":"public/tags/index.html","hash":"52ff1f86cb6dcc5f6092af2bfec711152407eede","modified":1587537227978},{"_id":"public/2020/04/21/hello-world/index.html","hash":"75d4de5d875568e8cfda42736e61810fa22ed904","modified":1587537227978},{"_id":"public/2019/11/11/接口与实现类动态切换的四种方式/index.html","hash":"cd7107774b034c79c269633acd916994ded3512f","modified":1587537227978},{"_id":"public/2019/10/25/Git常用命令/index.html","hash":"cff0659f692cbb038a0af6e8546f5d4508cec187","modified":1587537227978},{"_id":"public/index.html","hash":"7067776a62ba1ff7269416c7cc2be7318417a3ec","modified":1587537227978},{"_id":"public/CNAME","hash":"69cdb7c40996c1c0cba14da2db3722373a3e6c54","modified":1587537227978},{"_id":"public/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1587537227978},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1587537227978},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1587537227978},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1587537227978},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1587537227978},{"_id":"public/img/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1587537227978},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1587537227978},{"_id":"public/js/animation.js","hash":"59a05568fd5718513792b0d48bcb4bcf7eaa20e8","modified":1587537227978},{"_id":"public/js/back_to_top.js","hash":"0f071e2331e39043529041322c4812bb13a3990d","modified":1587537227978},{"_id":"public/js/main.js","hash":"3fb6be34945798cd400825e021c4267856fff2df","modified":1587537227978},{"_id":"public/css/cyberpunk.css","hash":"5990acc12b03ce68bacd773aa76d2835269cb214","modified":1587537227978},{"_id":"public/css/default.css","hash":"14d1ac0ad4790540b4496c609d6fd78116eccd1c","modified":1587537227978},{"_id":"public/css/style.css","hash":"14d1ac0ad4790540b4496c609d6fd78116eccd1c","modified":1587537227978},{"_id":"themes/icarus-bak/README.md","hash":"c948b354de7161e51f4f87e33393295051d7a7c3","modified":1587536894765},{"_id":"themes/icarus-bak/_config.yml","hash":"63af11d822ad3a1abedaf3f1964d1d6a4755f2c5","modified":1587537194336},{"_id":"themes/icarus-bak/package.json","hash":"9080de9f1223fe9906312a3f3b1096fe0eb82e38","modified":1587536894786},{"_id":"themes/icarus-bak/include/config.js","hash":"13feb2c1ac64f5598f335985fb1ee4bc5e9389f1","modified":1587536894765},{"_id":"themes/icarus-bak/include/dependency.js","hash":"3f84538fa2f528634a1f8254c49ab4c5ebfb19e7","modified":1587536894765},{"_id":"themes/icarus-bak/include/register.js","hash":"90c55de6c114018e2ac517a2d469e2ea4cd193c5","modified":1587536894767},{"_id":"themes/icarus-bak/languages/de.yml","hash":"79d769768780b9a72eb256ab61f217b8bdebf85b","modified":1587536894776},{"_id":"themes/icarus-bak/languages/en.yml","hash":"792bc85571b0c16f591bb5455819793a02373017","modified":1587536894776},{"_id":"themes/icarus-bak/languages/es.yml","hash":"2e59e579d393c881dcbb885516d93eeaf469cec2","modified":1587536894776},{"_id":"themes/icarus-bak/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1587536894777},{"_id":"themes/icarus-bak/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1587536894777},{"_id":"themes/icarus-bak/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1587536894777},{"_id":"themes/icarus-bak/languages/ko.yml","hash":"e7ac736b604429adedd67f3ca6043201eff7b23b","modified":1587536894777},{"_id":"themes/icarus-bak/languages/pl.yml","hash":"43f5447c38c9be2e1f5ce6181a0f97eeb437b059","modified":1587536894778},{"_id":"themes/icarus-bak/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1587536894778},{"_id":"themes/icarus-bak/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1587536894778},{"_id":"themes/icarus-bak/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1587536894778},{"_id":"themes/icarus-bak/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1587536894779},{"_id":"themes/icarus-bak/languages/zh-CN.yml","hash":"2f21370cb9aaa7bbe4f362618df450d7bc571a63","modified":1587536894779},{"_id":"themes/icarus-bak/languages/zh-TW.yml","hash":"9172121b0ec3d78861fa6ccdd6396cef90fabdc7","modified":1587536894779},{"_id":"themes/icarus-bak/layout/archive.jsx","hash":"09c58b8e431445f1b40f2b19bc03ebc1a07a2a43","modified":1587536894779},{"_id":"themes/icarus-bak/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1587536894780},{"_id":"themes/icarus-bak/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1587536894780},{"_id":"themes/icarus-bak/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1587536894783},{"_id":"themes/icarus-bak/layout/layout.jsx","hash":"38dc2da22fc3c6767d7e82d55d6d11a98a462178","modified":1587537109770},{"_id":"themes/icarus-bak/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1587536894784},{"_id":"themes/icarus-bak/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1587536894785},{"_id":"themes/icarus-bak/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1587536894786},{"_id":"themes/icarus-bak/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1587536894786},{"_id":"themes/icarus-bak/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":1587536894787},{"_id":"themes/icarus-bak/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587536894783},{"_id":"themes/icarus-bak/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587536894780},{"_id":"themes/icarus-bak/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587536894784},{"_id":"themes/icarus-bak/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587536894785},{"_id":"themes/icarus-bak/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587536894786},{"_id":"themes/icarus-bak/include/migration/head.js","hash":"cca7d3a828427cbdd5cbc6a93e501a4fea1c72fd","modified":1587536894767},{"_id":"themes/icarus-bak/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":1587536894767},{"_id":"themes/icarus-bak/include/schema/config.json","hash":"f91dc103f4a95c870b4d6824dfe005289db5e309","modified":1587536894771},{"_id":"themes/icarus-bak/include/style/article.styl","hash":"0e8c3a5cf40875d4f129a4531fd47aa158d4abe7","modified":1587536894773},{"_id":"themes/icarus-bak/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1587536894773},{"_id":"themes/icarus-bak/include/style/base.styl","hash":"ea038ebd8dcd442e54814e7529aa0ec5d4991977","modified":1587536894773},{"_id":"themes/icarus-bak/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1587536894773},{"_id":"themes/icarus-bak/include/style/codeblock.styl","hash":"44060ec764f12806bb67a6ae450e991c46adf7d0","modified":1587536894773},{"_id":"themes/icarus-bak/include/style/donate.styl","hash":"acf06ddda9ae3f671f6237fbd059360f631a3ef7","modified":1587536894773},{"_id":"themes/icarus-bak/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1587536894774},{"_id":"themes/icarus-bak/include/style/helper.styl","hash":"f6fe487415914dc6eb1ce10f53b1ab64eeba07ed","modified":1587536894774},{"_id":"themes/icarus-bak/include/style/navbar.styl","hash":"ecc73c8ad504c0fa4bb910eb51500c14e0a8d662","modified":1587536894774},{"_id":"themes/icarus-bak/include/style/plugin.styl","hash":"821748cda47f46e54e0ca12ee0974342c49625ba","modified":1587536894774},{"_id":"themes/icarus-bak/include/style/pagination.styl","hash":"748c4fa46a6e2ec73bda213bb966bb2ee840c095","modified":1587536894774},{"_id":"themes/icarus-bak/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1587536894775},{"_id":"themes/icarus-bak/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1587536894776},{"_id":"themes/icarus-bak/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1587536894775},{"_id":"themes/icarus-bak/include/style/search.styl","hash":"a8876f24d33075e52565ab070f61e453a358d5df","modified":1587536894775},{"_id":"themes/icarus-bak/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":1587536894781},{"_id":"themes/icarus-bak/layout/common/article.jsx","hash":"f858a8ef0116ec1dc8716a1f1dd16b307cbaa95e","modified":1587536894780},{"_id":"themes/icarus-bak/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":1587536894781},{"_id":"themes/icarus-bak/layout/common/footer.jsx","hash":"f0533a1767cbe11f47f96c0b07eb4b446f3374ce","modified":1587536894781},{"_id":"themes/icarus-bak/layout/common/head.jsx","hash":"64b5c10c1d93bbf0659a04d78a4ecd8b2672c406","modified":1587536894782},{"_id":"themes/icarus-bak/layout/common/navbar.jsx","hash":"ada3968a846a3878009f1b5683346de09509297a","modified":1587536894782},{"_id":"themes/icarus-bak/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":1587536894782},{"_id":"themes/icarus-bak/layout/common/scripts.jsx","hash":"677857a166ad8fd1fec74d869a056348bf2d6800","modified":1587536894783},{"_id":"themes/icarus-bak/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":1587536894783},{"_id":"themes/icarus-bak/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":1587536894783},{"_id":"themes/icarus-bak/layout/common/widgets.jsx","hash":"d3d3cbe292793ffc8be2a10fd37e8e38ffb2f077","modified":1587537109773},{"_id":"themes/icarus-bak/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1587536894785},{"_id":"themes/icarus-bak/layout/plugin/back_to_top.jsx","hash":"54d5a7606e80f76f7492a690eb65d5b5e03b615a","modified":1587536894785},{"_id":"themes/icarus-bak/layout/widget/profile.jsx","hash":"ba594611e8227975e3f2ce0d24a7856ab9427bd8","modified":1587536894786},{"_id":"themes/icarus-bak/source/css/cyberpunk.styl","hash":"4f67ae0b413c1b0286452d607ca646c4fe717f62","modified":1587536894787},{"_id":"themes/icarus-bak/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1587536894788},{"_id":"themes/icarus-bak/source/css/style.styl","hash":"be5d28ba5098e36483d21f94e4deb0bd2ec075e4","modified":1587536894788},{"_id":"themes/icarus-bak/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1587536894789},{"_id":"themes/icarus-bak/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1587536894789},{"_id":"themes/icarus-bak/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1587536894789},{"_id":"themes/icarus-bak/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1587536894790},{"_id":"themes/icarus-bak/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1587536894790},{"_id":"themes/icarus-bak/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1587536894790},{"_id":"themes/icarus-bak/source/img/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1587536894791},{"_id":"themes/icarus-bak/source/js/.eslintrc.json","hash":"6bf0641cb69dffac97f69baea192d7fa3ab612cb","modified":1587536894791},{"_id":"themes/icarus-bak/source/js/animation.js","hash":"59a05568fd5718513792b0d48bcb4bcf7eaa20e8","modified":1587536894791},{"_id":"themes/icarus-bak/source/js/back_to_top.js","hash":"0f071e2331e39043529041322c4812bb13a3990d","modified":1587536894791},{"_id":"themes/icarus-bak/source/js/main.js","hash":"3fb6be34945798cd400825e021c4267856fff2df","modified":1587536894792},{"_id":"themes/icarus-bak/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587536894768},{"_id":"themes/icarus-bak/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587536894771},{"_id":"themes/icarus-bak/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587536894771},{"_id":"themes/icarus-bak/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587536894772},{"_id":"themes/icarus-bak/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1587536894772},{"_id":"themes/icarus-bak/include/hexo/generator/category.js","hash":"d7e7779d5afd8d4e2b0cf9a15feed84c0ea42590","modified":1587536894766},{"_id":"themes/icarus-bak/include/hexo/generator/insight.js","hash":"0af168e624af01c930b4c3aaecc3af2e2dc18871","modified":1587536894766},{"_id":"themes/icarus-bak/include/schema/common/article.json","hash":"37704130789d44c313e03c9dacb809a57274c06f","modified":1587536894768},{"_id":"themes/icarus-bak/include/schema/common/comment.json","hash":"bd30bd9ffc84e88e704384acdfcaab09019a744f","modified":1587536894768},{"_id":"themes/icarus-bak/include/schema/common/donates.json","hash":"e6b655f5f4af8958efd23137e96de35426e01a77","modified":1587536894768},{"_id":"themes/icarus-bak/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":1587536894769},{"_id":"themes/icarus-bak/include/schema/common/head.json","hash":"49a2a8c0508bad9446868c3c05e7fa3250855af8","modified":1587536894769},{"_id":"themes/icarus-bak/include/schema/common/navbar.json","hash":"df708bc8a25d4eeec268969f014ad99f9e74ef7a","modified":1587536894769},{"_id":"themes/icarus-bak/include/schema/common/plugins.json","hash":"0217f2af8a4d6731652a3a49b5801bbfe0e73fff","modified":1587536894769},{"_id":"themes/icarus-bak/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1587536894770},{"_id":"themes/icarus-bak/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1587536894770},{"_id":"themes/icarus-bak/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1587536894770},{"_id":"themes/icarus-bak/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1587536894770},{"_id":"themes/icarus-bak/include/schema/common/widgets.json","hash":"d000b4d1d09bdd64756265aa4cd2ea980ab7ddc7","modified":1587536894771},{"_id":"themes/icarus-bak/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1587536894772},{"_id":"themes/icarus-bak/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1587536894772},{"_id":"themes/icarus-bak/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1587536894772}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Git常用命令","date":"2019-10-25T08:57:25.000Z","_content":"\n\n\n记录一下 备忘\n学习地址：http://www.liaoxuefeng.com/\nhttp://stormzhang.com/github/2016/07/09/learn-from-github-from-zero6/\n## git 安装 配置\n1. 安装\n2.  配置\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\" \n\n//非必要配置 (可查看上面的学习地址)\ngit config --global color.ui true//让Git显示颜色，会让命令输出看起来更醒目：\n\n忽略特殊文件\n配置别名 \n.\n.\n.\n```\n\n## 基本命令\n```\ngit init   //创建git版本库\n\ngit add <file> //添加到暂存区\ngit add * 添加所有（不包括.gitignore 配置的忽略内容）\n\ngit rm  <file> //删除文件\n\ngit commit -m \"描述\" //提交到版本库\n\ngit status //状态查看\n\ngit diff //查看修改内容\n\ngit log //提交历史 \n\ngit log --pretty=oneline \n\ngit log --graph //查看分支合并图\n\ngit reflog //命令历史\n\ngit reset --hard HEAD^ //版本回退 上一版本 前多少版本  head~数字\n\ngit reset --hard 3628164 //根据commitid进行版本回退\n\ngit checkout -- <file> //丢弃工作区的修改（实是用版本库里的版本替换工作区的版本）\n\ngit reset HEAD <file> //丢弃暂存区的修改\n\ngit tag <name>//用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n\ngit tag -a <tagname> -m \"blablabla...\"//可以指定标签信息；\n\ngit tag -s <tagname> -m \"blablabla...\"//可以用PGP签名标签；\n\ngit tag//可以查看所有标签。\n\ngit push origin <tagname>//可以推送一个本地标签；\n\ngit push origin --tags//可以推送全部未推送过的本地标签；\n\ngit tag -d <tagname>//可以删除一个本地标签；\n\ngit push origin :refs/tags/<tagname>//可以删除一个远程标签。\ngit show <tagname>//查看标签信息\ngit checkout tag/commitid //版本回退\n```\n## git 结合远程库 的一些命令\n```\nssh-keygen -t rsa -C \"youremail@example.com\" //生成ssh key\n\nssh -T git@github.com //测试是否能够连接\n\ngit remote add origin git@github.com:michaelliao/learngit.git //建立本地和远程库关联 远程库的名字就是origin，这是Git默认的叫法\n\ngit push  origin <分支名称> //推送到远程 第一次要 加 -u 建立分支关联\n\ngit clone git@github.com:michaelliao/gitskills.git //克隆 默认是master\n\ngit clone -b <指定分支名称> git@github.com:michaelliao/gitskills.git //克隆指定分支\n\ngit pull //从远程抓取最新的提交\n\ngit remote -v //查看远程库信息\ngit remote remove origin 解除和远程库关联\n\n```\n## .gitignore配置\n.gitginore 也要同步上传的远程库\n```\n/.idea/\n*.iml\n/target/\n```\n## 分支管理\n>如果你是一个人开发，可能只需要 master、develop 两个分支就 ok 了，平时开发在 develop 分支进行，开发完成之后，发布之前合并到 master 分支\n\n```\ngit branch //查看分支\n\ngit branch <name> //创建分支\n\ngit checkout <name> //切换分支\ngit checkout -b <name> //创建+切换分支\n\ngit merge <name> //合并某分支到当前分支\n\n//加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并\ngit branch -d <name> //删除分支\n\ngit branch -D <name> //丢弃一个没有被合并过的分支\n\ngit stash\n\ngit stash pop //回到工作现场\n\ngit stash list\n\ngit checkout -b branch-name origin/branch-name//在本地创建和远程分支对应的分支\n\ngit branch --set-upstream branch-name origin/branch-name //建立本地分支和远程分支的关联\n\n```\n\n## checkout \n\n### 切换分支\n```\ngit checkout <name> //切换分支\ngit checkout -b <name> //创建+切换分支\ngit checkout -b branch-name origin/branch-name //在本地创建和远程分支对应的分支\n```\n切换tag，切换到某次commit\n```\ngit checkout tag/commitid //版本回退\n```\n### 撤销\n\n```git checkout -- <file> //丢弃工作区的修改（实是用版本库里的版本替换工作区的版本）\n ```\n## 补充\n\n一. reset的hard，soft，mixed参数区别\n\ngit reset :和git add命令作用相反，撤销add操作，把index区内容撤销到working directory\n\ngit reset的--hard  --mixed  --soft参数区别：\nhard：把working directory和index区的内容都重置为指定的commit 版本\nsoft：保留现在working directory和index区的内容，HEAD指向制定的commit 版本\nmixed：保留working区的内容，将index区和HEAD内容都修恢复到指定的commit版本\n\n二. reset和revert区别\n      reset是回朔到指定的commit版本（指定commit版本之后的操作都消失了）。revert是删除指定的commit操作的内容（指定的版本内容消失，之前和之后commit版本内的操作都保留），但是这个操作也会做了一个commit提交版本。\n      \n三： 如果本地的版本回退使用reset的话,  push 到 远程库 需要加 -f 强制操作  （因为 远程的commit 高于 本地)\n四： pull 时候和本地冲突\nerror: Your local changes to 'c/environ.c' would be overwritten by merge.  Aborting.\n Please, commit your changes or stash them before you can merge.\n这个意思是说更新下来的内容和本地修改的内容有冲突，先提交你的改变或者先将本地修改暂时存储起来。\n处理的方式非常简单，主要是使用git stash命令进行处理，分成以下几个步骤进行处理。\n1、先将本地修改存储起来\n$ git stash\n这样本地的所有修改就都被暂时存储起来 。是用git stash list可以看到保存的信息：\ngit stash暂存修改\n其中stash@{0}就是刚才保存的标记。\n2、pull内容\n暂存了本地修改之后，就可以pull了。\n3、还原暂存的内容\n$git stash pop stash@{0}\n系统提示如下类似的信息：\nAuto-merging c/environ.c\nCONFLICT (content): Merge conflict in c/environ.c\n意思就是系统自动合并修改的内容，但是其中有冲突，需要解决其中的冲突。\n4、解决文件中冲突的的部分\n就可以正常的提交了。\n五：强制pull\n>git fetch --all  \ngit reset --hard origin/master \ngit pull\n\ngit fetch 只是下载远程的库的内容，不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本","source":"_posts/Git常用命令.md","raw":"---\ntitle: Git常用命令\ndate: 2019-10-25 16:57:25\ntags:\n---\n\n\n\n记录一下 备忘\n学习地址：http://www.liaoxuefeng.com/\nhttp://stormzhang.com/github/2016/07/09/learn-from-github-from-zero6/\n## git 安装 配置\n1. 安装\n2.  配置\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\" \n\n//非必要配置 (可查看上面的学习地址)\ngit config --global color.ui true//让Git显示颜色，会让命令输出看起来更醒目：\n\n忽略特殊文件\n配置别名 \n.\n.\n.\n```\n\n## 基本命令\n```\ngit init   //创建git版本库\n\ngit add <file> //添加到暂存区\ngit add * 添加所有（不包括.gitignore 配置的忽略内容）\n\ngit rm  <file> //删除文件\n\ngit commit -m \"描述\" //提交到版本库\n\ngit status //状态查看\n\ngit diff //查看修改内容\n\ngit log //提交历史 \n\ngit log --pretty=oneline \n\ngit log --graph //查看分支合并图\n\ngit reflog //命令历史\n\ngit reset --hard HEAD^ //版本回退 上一版本 前多少版本  head~数字\n\ngit reset --hard 3628164 //根据commitid进行版本回退\n\ngit checkout -- <file> //丢弃工作区的修改（实是用版本库里的版本替换工作区的版本）\n\ngit reset HEAD <file> //丢弃暂存区的修改\n\ngit tag <name>//用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n\ngit tag -a <tagname> -m \"blablabla...\"//可以指定标签信息；\n\ngit tag -s <tagname> -m \"blablabla...\"//可以用PGP签名标签；\n\ngit tag//可以查看所有标签。\n\ngit push origin <tagname>//可以推送一个本地标签；\n\ngit push origin --tags//可以推送全部未推送过的本地标签；\n\ngit tag -d <tagname>//可以删除一个本地标签；\n\ngit push origin :refs/tags/<tagname>//可以删除一个远程标签。\ngit show <tagname>//查看标签信息\ngit checkout tag/commitid //版本回退\n```\n## git 结合远程库 的一些命令\n```\nssh-keygen -t rsa -C \"youremail@example.com\" //生成ssh key\n\nssh -T git@github.com //测试是否能够连接\n\ngit remote add origin git@github.com:michaelliao/learngit.git //建立本地和远程库关联 远程库的名字就是origin，这是Git默认的叫法\n\ngit push  origin <分支名称> //推送到远程 第一次要 加 -u 建立分支关联\n\ngit clone git@github.com:michaelliao/gitskills.git //克隆 默认是master\n\ngit clone -b <指定分支名称> git@github.com:michaelliao/gitskills.git //克隆指定分支\n\ngit pull //从远程抓取最新的提交\n\ngit remote -v //查看远程库信息\ngit remote remove origin 解除和远程库关联\n\n```\n## .gitignore配置\n.gitginore 也要同步上传的远程库\n```\n/.idea/\n*.iml\n/target/\n```\n## 分支管理\n>如果你是一个人开发，可能只需要 master、develop 两个分支就 ok 了，平时开发在 develop 分支进行，开发完成之后，发布之前合并到 master 分支\n\n```\ngit branch //查看分支\n\ngit branch <name> //创建分支\n\ngit checkout <name> //切换分支\ngit checkout -b <name> //创建+切换分支\n\ngit merge <name> //合并某分支到当前分支\n\n//加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并\ngit branch -d <name> //删除分支\n\ngit branch -D <name> //丢弃一个没有被合并过的分支\n\ngit stash\n\ngit stash pop //回到工作现场\n\ngit stash list\n\ngit checkout -b branch-name origin/branch-name//在本地创建和远程分支对应的分支\n\ngit branch --set-upstream branch-name origin/branch-name //建立本地分支和远程分支的关联\n\n```\n\n## checkout \n\n### 切换分支\n```\ngit checkout <name> //切换分支\ngit checkout -b <name> //创建+切换分支\ngit checkout -b branch-name origin/branch-name //在本地创建和远程分支对应的分支\n```\n切换tag，切换到某次commit\n```\ngit checkout tag/commitid //版本回退\n```\n### 撤销\n\n```git checkout -- <file> //丢弃工作区的修改（实是用版本库里的版本替换工作区的版本）\n ```\n## 补充\n\n一. reset的hard，soft，mixed参数区别\n\ngit reset :和git add命令作用相反，撤销add操作，把index区内容撤销到working directory\n\ngit reset的--hard  --mixed  --soft参数区别：\nhard：把working directory和index区的内容都重置为指定的commit 版本\nsoft：保留现在working directory和index区的内容，HEAD指向制定的commit 版本\nmixed：保留working区的内容，将index区和HEAD内容都修恢复到指定的commit版本\n\n二. reset和revert区别\n      reset是回朔到指定的commit版本（指定commit版本之后的操作都消失了）。revert是删除指定的commit操作的内容（指定的版本内容消失，之前和之后commit版本内的操作都保留），但是这个操作也会做了一个commit提交版本。\n      \n三： 如果本地的版本回退使用reset的话,  push 到 远程库 需要加 -f 强制操作  （因为 远程的commit 高于 本地)\n四： pull 时候和本地冲突\nerror: Your local changes to 'c/environ.c' would be overwritten by merge.  Aborting.\n Please, commit your changes or stash them before you can merge.\n这个意思是说更新下来的内容和本地修改的内容有冲突，先提交你的改变或者先将本地修改暂时存储起来。\n处理的方式非常简单，主要是使用git stash命令进行处理，分成以下几个步骤进行处理。\n1、先将本地修改存储起来\n$ git stash\n这样本地的所有修改就都被暂时存储起来 。是用git stash list可以看到保存的信息：\ngit stash暂存修改\n其中stash@{0}就是刚才保存的标记。\n2、pull内容\n暂存了本地修改之后，就可以pull了。\n3、还原暂存的内容\n$git stash pop stash@{0}\n系统提示如下类似的信息：\nAuto-merging c/environ.c\nCONFLICT (content): Merge conflict in c/environ.c\n意思就是系统自动合并修改的内容，但是其中有冲突，需要解决其中的冲突。\n4、解决文件中冲突的的部分\n就可以正常的提交了。\n五：强制pull\n>git fetch --all  \ngit reset --hard origin/master \ngit pull\n\ngit fetch 只是下载远程的库的内容，不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本","slug":"Git常用命令","published":1,"updated":"2020-04-21T08:27:37.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck99qxmit0000wuoz2i0566fw","content":"<p>记录一下 备忘<br>学习地址：<a href=\"http://www.liaoxuefeng.com/\">http://www.liaoxuefeng.com/</a><br><a href=\"http://stormzhang.com/github/2016/07/09/learn-from-github-from-zero6/\">http://stormzhang.com/github/2016/07/09/learn-from-github-from-zero6/</a></p>\n<h2 id=\"git-安装-配置\"><a href=\"#git-安装-配置\" class=\"headerlink\" title=\"git 安装 配置\"></a>git 安装 配置</h2><ol>\n<li>安装</li>\n<li>配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;Your Name&quot;</span><br><span class=\"line\">$ git config --global user.email &quot;email@example.com&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;非必要配置 (可查看上面的学习地址)</span><br><span class=\"line\">git config --global color.ui true&#x2F;&#x2F;让Git显示颜色，会让命令输出看起来更醒目：</span><br><span class=\"line\"></span><br><span class=\"line\">忽略特殊文件</span><br><span class=\"line\">配置别名 </span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init   &#x2F;&#x2F;创建git版本库</span><br><span class=\"line\"></span><br><span class=\"line\">git add &lt;file&gt; &#x2F;&#x2F;添加到暂存区</span><br><span class=\"line\">git add * 添加所有（不包括.gitignore 配置的忽略内容）</span><br><span class=\"line\"></span><br><span class=\"line\">git rm  &lt;file&gt; &#x2F;&#x2F;删除文件</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m &quot;描述&quot; &#x2F;&#x2F;提交到版本库</span><br><span class=\"line\"></span><br><span class=\"line\">git status &#x2F;&#x2F;状态查看</span><br><span class=\"line\"></span><br><span class=\"line\">git diff &#x2F;&#x2F;查看修改内容</span><br><span class=\"line\"></span><br><span class=\"line\">git log &#x2F;&#x2F;提交历史 </span><br><span class=\"line\"></span><br><span class=\"line\">git log --pretty&#x3D;oneline </span><br><span class=\"line\"></span><br><span class=\"line\">git log --graph &#x2F;&#x2F;查看分支合并图</span><br><span class=\"line\"></span><br><span class=\"line\">git reflog &#x2F;&#x2F;命令历史</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard HEAD^ &#x2F;&#x2F;版本回退 上一版本 前多少版本  head~数字</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard 3628164 &#x2F;&#x2F;根据commitid进行版本回退</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -- &lt;file&gt; &#x2F;&#x2F;丢弃工作区的修改（实是用版本库里的版本替换工作区的版本）</span><br><span class=\"line\"></span><br><span class=\"line\">git reset HEAD &lt;file&gt; &#x2F;&#x2F;丢弃暂存区的修改</span><br><span class=\"line\"></span><br><span class=\"line\">git tag &lt;name&gt;&#x2F;&#x2F;用于新建一个标签，默认为HEAD，也可以指定一个commit id；</span><br><span class=\"line\"></span><br><span class=\"line\">git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;&#x2F;&#x2F;可以指定标签信息；</span><br><span class=\"line\"></span><br><span class=\"line\">git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;&#x2F;&#x2F;可以用PGP签名标签；</span><br><span class=\"line\"></span><br><span class=\"line\">git tag&#x2F;&#x2F;可以查看所有标签。</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin &lt;tagname&gt;&#x2F;&#x2F;可以推送一个本地标签；</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin --tags&#x2F;&#x2F;可以推送全部未推送过的本地标签；</span><br><span class=\"line\"></span><br><span class=\"line\">git tag -d &lt;tagname&gt;&#x2F;&#x2F;可以删除一个本地标签；</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin :refs&#x2F;tags&#x2F;&lt;tagname&gt;&#x2F;&#x2F;可以删除一个远程标签。</span><br><span class=\"line\">git show &lt;tagname&gt;&#x2F;&#x2F;查看标签信息</span><br><span class=\"line\">git checkout tag&#x2F;commitid &#x2F;&#x2F;版本回退</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-结合远程库-的一些命令\"><a href=\"#git-结合远程库-的一些命令\" class=\"headerlink\" title=\"git 结合远程库 的一些命令\"></a>git 结合远程库 的一些命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;youremail@example.com&quot; &#x2F;&#x2F;生成ssh key</span><br><span class=\"line\"></span><br><span class=\"line\">ssh -T git@github.com &#x2F;&#x2F;测试是否能够连接</span><br><span class=\"line\"></span><br><span class=\"line\">git remote add origin git@github.com:michaelliao&#x2F;learngit.git &#x2F;&#x2F;建立本地和远程库关联 远程库的名字就是origin，这是Git默认的叫法</span><br><span class=\"line\"></span><br><span class=\"line\">git push  origin &lt;分支名称&gt; &#x2F;&#x2F;推送到远程 第一次要 加 -u 建立分支关联</span><br><span class=\"line\"></span><br><span class=\"line\">git clone git@github.com:michaelliao&#x2F;gitskills.git &#x2F;&#x2F;克隆 默认是master</span><br><span class=\"line\"></span><br><span class=\"line\">git clone -b &lt;指定分支名称&gt; git@github.com:michaelliao&#x2F;gitskills.git &#x2F;&#x2F;克隆指定分支</span><br><span class=\"line\"></span><br><span class=\"line\">git pull &#x2F;&#x2F;从远程抓取最新的提交</span><br><span class=\"line\"></span><br><span class=\"line\">git remote -v &#x2F;&#x2F;查看远程库信息</span><br><span class=\"line\">git remote remove origin 解除和远程库关联</span><br></pre></td></tr></table></figure>\n<h2 id=\"gitignore配置\"><a href=\"#gitignore配置\" class=\"headerlink\" title=\".gitignore配置\"></a>.gitignore配置</h2><p>.gitginore 也要同步上传的远程库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;.idea&#x2F;</span><br><span class=\"line\">*.iml</span><br><span class=\"line\">&#x2F;target&#x2F;</span><br></pre></td></tr></table></figure>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><blockquote>\n<p>如果你是一个人开发，可能只需要 master、develop 两个分支就 ok 了，平时开发在 develop 分支进行，开发完成之后，发布之前合并到 master 分支</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch &#x2F;&#x2F;查看分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch &lt;name&gt; &#x2F;&#x2F;创建分支</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout &lt;name&gt; &#x2F;&#x2F;切换分支</span><br><span class=\"line\">git checkout -b &lt;name&gt; &#x2F;&#x2F;创建+切换分支</span><br><span class=\"line\"></span><br><span class=\"line\">git merge &lt;name&gt; &#x2F;&#x2F;合并某分支到当前分支</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并</span><br><span class=\"line\">git branch -d &lt;name&gt; &#x2F;&#x2F;删除分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -D &lt;name&gt; &#x2F;&#x2F;丢弃一个没有被合并过的分支</span><br><span class=\"line\"></span><br><span class=\"line\">git stash</span><br><span class=\"line\"></span><br><span class=\"line\">git stash pop &#x2F;&#x2F;回到工作现场</span><br><span class=\"line\"></span><br><span class=\"line\">git stash list</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -b branch-name origin&#x2F;branch-name&#x2F;&#x2F;在本地创建和远程分支对应的分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch --set-upstream branch-name origin&#x2F;branch-name &#x2F;&#x2F;建立本地分支和远程分支的关联</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h2><h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;name&gt; &#x2F;&#x2F;切换分支</span><br><span class=\"line\">git checkout -b &lt;name&gt; &#x2F;&#x2F;创建+切换分支</span><br><span class=\"line\">git checkout -b branch-name origin&#x2F;branch-name &#x2F;&#x2F;在本地创建和远程分支对应的分支</span><br></pre></td></tr></table></figure>\n<p>切换tag，切换到某次commit</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout tag&#x2F;commitid &#x2F;&#x2F;版本回退</span><br></pre></td></tr></table></figure>\n<h3 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h3><figure class=\"highlight plain\"><figcaption><span>checkout -- <file></span><a href=\"//丢弃工作区的修改（实是用版本库里的版本替换工作区的版本）\">link</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>一. reset的hard，soft，mixed参数区别</p>\n<p>git reset :和git add命令作用相反，撤销add操作，把index区内容撤销到working directory</p>\n<p>git reset的–hard  –mixed  –soft参数区别：<br>hard：把working directory和index区的内容都重置为指定的commit 版本<br>soft：保留现在working directory和index区的内容，HEAD指向制定的commit 版本<br>mixed：保留working区的内容，将index区和HEAD内容都修恢复到指定的commit版本</p>\n<p>二. reset和revert区别<br>      reset是回朔到指定的commit版本（指定commit版本之后的操作都消失了）。revert是删除指定的commit操作的内容（指定的版本内容消失，之前和之后commit版本内的操作都保留），但是这个操作也会做了一个commit提交版本。</p>\n<p>三： 如果本地的版本回退使用reset的话,  push 到 远程库 需要加 -f 强制操作  （因为 远程的commit 高于 本地)<br>四： pull 时候和本地冲突<br>error: Your local changes to ‘c/environ.c’ would be overwritten by merge.  Aborting.<br> Please, commit your changes or stash them before you can merge.<br>这个意思是说更新下来的内容和本地修改的内容有冲突，先提交你的改变或者先将本地修改暂时存储起来。<br>处理的方式非常简单，主要是使用git stash命令进行处理，分成以下几个步骤进行处理。<br>1、先将本地修改存储起来<br>$ git stash<br>这样本地的所有修改就都被暂时存储起来 。是用git stash list可以看到保存的信息：<br>git stash暂存修改<br>其中stash@{0}就是刚才保存的标记。<br>2、pull内容<br>暂存了本地修改之后，就可以pull了。<br>3、还原暂存的内容<br>$git stash pop stash@{0}<br>系统提示如下类似的信息：<br>Auto-merging c/environ.c<br>CONFLICT (content): Merge conflict in c/environ.c<br>意思就是系统自动合并修改的内容，但是其中有冲突，需要解决其中的冲突。<br>4、解决文件中冲突的的部分<br>就可以正常的提交了。<br>五：强制pull</p>\n<blockquote>\n<p>git fetch –all<br>git reset –hard origin/master<br>git pull</p>\n</blockquote>\n<p>git fetch 只是下载远程的库的内容，不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本</p>\n","site":{"data":{}},"excerpt":"","more":"<p>记录一下 备忘<br>学习地址：<a href=\"http://www.liaoxuefeng.com/\">http://www.liaoxuefeng.com/</a><br><a href=\"http://stormzhang.com/github/2016/07/09/learn-from-github-from-zero6/\">http://stormzhang.com/github/2016/07/09/learn-from-github-from-zero6/</a></p>\n<h2 id=\"git-安装-配置\"><a href=\"#git-安装-配置\" class=\"headerlink\" title=\"git 安装 配置\"></a>git 安装 配置</h2><ol>\n<li>安装</li>\n<li>配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;Your Name&quot;</span><br><span class=\"line\">$ git config --global user.email &quot;email@example.com&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;非必要配置 (可查看上面的学习地址)</span><br><span class=\"line\">git config --global color.ui true&#x2F;&#x2F;让Git显示颜色，会让命令输出看起来更醒目：</span><br><span class=\"line\"></span><br><span class=\"line\">忽略特殊文件</span><br><span class=\"line\">配置别名 </span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init   &#x2F;&#x2F;创建git版本库</span><br><span class=\"line\"></span><br><span class=\"line\">git add &lt;file&gt; &#x2F;&#x2F;添加到暂存区</span><br><span class=\"line\">git add * 添加所有（不包括.gitignore 配置的忽略内容）</span><br><span class=\"line\"></span><br><span class=\"line\">git rm  &lt;file&gt; &#x2F;&#x2F;删除文件</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m &quot;描述&quot; &#x2F;&#x2F;提交到版本库</span><br><span class=\"line\"></span><br><span class=\"line\">git status &#x2F;&#x2F;状态查看</span><br><span class=\"line\"></span><br><span class=\"line\">git diff &#x2F;&#x2F;查看修改内容</span><br><span class=\"line\"></span><br><span class=\"line\">git log &#x2F;&#x2F;提交历史 </span><br><span class=\"line\"></span><br><span class=\"line\">git log --pretty&#x3D;oneline </span><br><span class=\"line\"></span><br><span class=\"line\">git log --graph &#x2F;&#x2F;查看分支合并图</span><br><span class=\"line\"></span><br><span class=\"line\">git reflog &#x2F;&#x2F;命令历史</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard HEAD^ &#x2F;&#x2F;版本回退 上一版本 前多少版本  head~数字</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard 3628164 &#x2F;&#x2F;根据commitid进行版本回退</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -- &lt;file&gt; &#x2F;&#x2F;丢弃工作区的修改（实是用版本库里的版本替换工作区的版本）</span><br><span class=\"line\"></span><br><span class=\"line\">git reset HEAD &lt;file&gt; &#x2F;&#x2F;丢弃暂存区的修改</span><br><span class=\"line\"></span><br><span class=\"line\">git tag &lt;name&gt;&#x2F;&#x2F;用于新建一个标签，默认为HEAD，也可以指定一个commit id；</span><br><span class=\"line\"></span><br><span class=\"line\">git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;&#x2F;&#x2F;可以指定标签信息；</span><br><span class=\"line\"></span><br><span class=\"line\">git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;&#x2F;&#x2F;可以用PGP签名标签；</span><br><span class=\"line\"></span><br><span class=\"line\">git tag&#x2F;&#x2F;可以查看所有标签。</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin &lt;tagname&gt;&#x2F;&#x2F;可以推送一个本地标签；</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin --tags&#x2F;&#x2F;可以推送全部未推送过的本地标签；</span><br><span class=\"line\"></span><br><span class=\"line\">git tag -d &lt;tagname&gt;&#x2F;&#x2F;可以删除一个本地标签；</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin :refs&#x2F;tags&#x2F;&lt;tagname&gt;&#x2F;&#x2F;可以删除一个远程标签。</span><br><span class=\"line\">git show &lt;tagname&gt;&#x2F;&#x2F;查看标签信息</span><br><span class=\"line\">git checkout tag&#x2F;commitid &#x2F;&#x2F;版本回退</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-结合远程库-的一些命令\"><a href=\"#git-结合远程库-的一些命令\" class=\"headerlink\" title=\"git 结合远程库 的一些命令\"></a>git 结合远程库 的一些命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;youremail@example.com&quot; &#x2F;&#x2F;生成ssh key</span><br><span class=\"line\"></span><br><span class=\"line\">ssh -T git@github.com &#x2F;&#x2F;测试是否能够连接</span><br><span class=\"line\"></span><br><span class=\"line\">git remote add origin git@github.com:michaelliao&#x2F;learngit.git &#x2F;&#x2F;建立本地和远程库关联 远程库的名字就是origin，这是Git默认的叫法</span><br><span class=\"line\"></span><br><span class=\"line\">git push  origin &lt;分支名称&gt; &#x2F;&#x2F;推送到远程 第一次要 加 -u 建立分支关联</span><br><span class=\"line\"></span><br><span class=\"line\">git clone git@github.com:michaelliao&#x2F;gitskills.git &#x2F;&#x2F;克隆 默认是master</span><br><span class=\"line\"></span><br><span class=\"line\">git clone -b &lt;指定分支名称&gt; git@github.com:michaelliao&#x2F;gitskills.git &#x2F;&#x2F;克隆指定分支</span><br><span class=\"line\"></span><br><span class=\"line\">git pull &#x2F;&#x2F;从远程抓取最新的提交</span><br><span class=\"line\"></span><br><span class=\"line\">git remote -v &#x2F;&#x2F;查看远程库信息</span><br><span class=\"line\">git remote remove origin 解除和远程库关联</span><br></pre></td></tr></table></figure>\n<h2 id=\"gitignore配置\"><a href=\"#gitignore配置\" class=\"headerlink\" title=\".gitignore配置\"></a>.gitignore配置</h2><p>.gitginore 也要同步上传的远程库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;.idea&#x2F;</span><br><span class=\"line\">*.iml</span><br><span class=\"line\">&#x2F;target&#x2F;</span><br></pre></td></tr></table></figure>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><blockquote>\n<p>如果你是一个人开发，可能只需要 master、develop 两个分支就 ok 了，平时开发在 develop 分支进行，开发完成之后，发布之前合并到 master 分支</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch &#x2F;&#x2F;查看分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch &lt;name&gt; &#x2F;&#x2F;创建分支</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout &lt;name&gt; &#x2F;&#x2F;切换分支</span><br><span class=\"line\">git checkout -b &lt;name&gt; &#x2F;&#x2F;创建+切换分支</span><br><span class=\"line\"></span><br><span class=\"line\">git merge &lt;name&gt; &#x2F;&#x2F;合并某分支到当前分支</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并</span><br><span class=\"line\">git branch -d &lt;name&gt; &#x2F;&#x2F;删除分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -D &lt;name&gt; &#x2F;&#x2F;丢弃一个没有被合并过的分支</span><br><span class=\"line\"></span><br><span class=\"line\">git stash</span><br><span class=\"line\"></span><br><span class=\"line\">git stash pop &#x2F;&#x2F;回到工作现场</span><br><span class=\"line\"></span><br><span class=\"line\">git stash list</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -b branch-name origin&#x2F;branch-name&#x2F;&#x2F;在本地创建和远程分支对应的分支</span><br><span class=\"line\"></span><br><span class=\"line\">git branch --set-upstream branch-name origin&#x2F;branch-name &#x2F;&#x2F;建立本地分支和远程分支的关联</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h2><h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;name&gt; &#x2F;&#x2F;切换分支</span><br><span class=\"line\">git checkout -b &lt;name&gt; &#x2F;&#x2F;创建+切换分支</span><br><span class=\"line\">git checkout -b branch-name origin&#x2F;branch-name &#x2F;&#x2F;在本地创建和远程分支对应的分支</span><br></pre></td></tr></table></figure>\n<p>切换tag，切换到某次commit</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout tag&#x2F;commitid &#x2F;&#x2F;版本回退</span><br></pre></td></tr></table></figure>\n<h3 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h3><figure class=\"highlight plain\"><figcaption><span>checkout -- <file></span><a href=\"//丢弃工作区的修改（实是用版本库里的版本替换工作区的版本）\">link</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>一. reset的hard，soft，mixed参数区别</p>\n<p>git reset :和git add命令作用相反，撤销add操作，把index区内容撤销到working directory</p>\n<p>git reset的–hard  –mixed  –soft参数区别：<br>hard：把working directory和index区的内容都重置为指定的commit 版本<br>soft：保留现在working directory和index区的内容，HEAD指向制定的commit 版本<br>mixed：保留working区的内容，将index区和HEAD内容都修恢复到指定的commit版本</p>\n<p>二. reset和revert区别<br>      reset是回朔到指定的commit版本（指定commit版本之后的操作都消失了）。revert是删除指定的commit操作的内容（指定的版本内容消失，之前和之后commit版本内的操作都保留），但是这个操作也会做了一个commit提交版本。</p>\n<p>三： 如果本地的版本回退使用reset的话,  push 到 远程库 需要加 -f 强制操作  （因为 远程的commit 高于 本地)<br>四： pull 时候和本地冲突<br>error: Your local changes to ‘c/environ.c’ would be overwritten by merge.  Aborting.<br> Please, commit your changes or stash them before you can merge.<br>这个意思是说更新下来的内容和本地修改的内容有冲突，先提交你的改变或者先将本地修改暂时存储起来。<br>处理的方式非常简单，主要是使用git stash命令进行处理，分成以下几个步骤进行处理。<br>1、先将本地修改存储起来<br>$ git stash<br>这样本地的所有修改就都被暂时存储起来 。是用git stash list可以看到保存的信息：<br>git stash暂存修改<br>其中stash@{0}就是刚才保存的标记。<br>2、pull内容<br>暂存了本地修改之后，就可以pull了。<br>3、还原暂存的内容<br>$git stash pop stash@{0}<br>系统提示如下类似的信息：<br>Auto-merging c/environ.c<br>CONFLICT (content): Merge conflict in c/environ.c<br>意思就是系统自动合并修改的内容，但是其中有冲突，需要解决其中的冲突。<br>4、解决文件中冲突的的部分<br>就可以正常的提交了。<br>五：强制pull</p>\n<blockquote>\n<p>git fetch –all<br>git reset –hard origin/master<br>git pull</p>\n</blockquote>\n<p>git fetch 只是下载远程的库的内容，不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2020-04-21T08:27:37.826Z","updated":"2020-04-21T08:27:37.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck99qxmiz0001wuozh6uigghv","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"post title with whitespace","date":"2019-10-25T07:40:41.000Z","_content":"\n\n你好\n","source":"_posts/post-title-with-whitespace.md","raw":"---\ntitle: post title with whitespace\ndate: 2019-10-25 15:40:41\ntags:\n---\n\n\n你好\n","slug":"post-title-with-whitespace","published":1,"updated":"2020-04-21T08:27:37.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck99qxmj20002wuozf4tvh64o","content":"<p>你好</p>\n","site":{"data":{}},"excerpt":"","more":"<p>你好</p>\n"},{"title":"test","date":"2020-04-21T08:02:25.000Z","_content":"\n# Test\n\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2020-04-21 16:02:25\ntags:\n---\n\n# Test\n\n","slug":"test","published":1,"updated":"2020-04-21T08:27:37.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck99qxmj30003wuoz2tup1pgt","content":"<h1 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h1>"},{"title":"接口与实现类动态切换的四种方式","date":"2019-11-11T08:31:49.000Z","_content":"\n# 第一种方式 Spring Map注入方式\n```java\npublic interface QuotaService {\n\n    /**\n     * 评估额度\n     * @param quotaRequest\n     * @return\n     */\n    QuotaResponse evaluateQuota(QuotaRequest quotaRequest);\n}\n```\n```java\n@Service(\"mockQuotaService\")\npublic class MockQuotaServiceImpl implements QuotaService\n```\n```java\n@Service(\"riskQuotaService\")\npublic class RiskQuotaServiceImpl implements QuotaService\n```\n如何使用\n```java\n\n    @Autowired\n    Map<String, QuotaService> quotaServiceMap;  \n\n   QuotaResponse quota = quotaServiceMap.get(apolloConfigUtil.getQuotaServiceName()).evaluateQuota(quotaRequest);\n\n```\n# 第二种方式 Spring Bean ApplicationContext\n\n```java\npublic interface BaseProcesser {\n    /**\n     * 获取支付类型\n     * @return\n     */\n    PaymentChannelEnum getPayType();\n\n}\n```\n\n```java\n@Service\npublic class PayChannelMappingFactory implements ApplicationContextAware{\n\n    //支付模版\n    private Map<PaymentChannelEnum, BasePayProcesser> payProcesserMap;\n\n    //支付模版\n    public BasePayProcesser getPayProcessor(PaymentChannelEnum payType){\n        return payProcesserMap.get(payType);\n    }\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        Map payMap = applicationContext.getBeansOfType(BasePayProcesser.class);\n        payProcesserMap = new HashMap<PaymentChannelEnum,BasePayProcesser>(payMap.size());\n        for(Object object:payMap.values()){\n            BasePayProcesser processor = (BasePayProcesser)object;\n            payProcesserMap.put(processor.getPayType(),processor);\n        }\n    }\n}\n```\n# 第三种方式 Java Spi \n\n```java\npublic class CallBackMappingFactory {\n\n    private static ConcurrentHashMap<String, MethodManager> methodMappings = new ConcurrentHashMap<>();\n\n    private volatile static boolean init = false;\n\n    private CallBackMappingFactory(){\n    }\n\n\n    private static void initHandlerMethod() {\n        ServiceLoader<AbstractCallBackReceiveService> baseMethodManagers = ServiceLoader.load(AbstractCallBackReceiveService.class);\n        for(AbstractCallBackReceiveService abstractCallBackReceiveService :baseMethodManagers){\n            Method[] methods = abstractCallBackReceiveService.getClass().getDeclaredMethods();\n            for (Method method : methods) {\n                MethodMapping methodMapping = method.getAnnotation(MethodMapping.class);\n                if (methodMapping != null && methodMapping.value() != null) {\n\n                    String mapping = methodMapping.value();\n                    addMethodMapping(mapping, new MethodManager(StringUtils.uncapitalize(abstractCallBackReceiveService.getClass().getSimpleName()),method));\n                }\n            }\n        }\n    }\n\n    private static void addMethodMapping(String mapping, MethodManager methodManager) {\n        methodMappings.put(mapping, methodManager);\n\n    }\n\n    public static MethodManager getMethodMapping(String url) {\n\n        if(!init){\n            initHandlerMethod();\n            init = true;\n        }\n        return methodMappings.get(url);\n    }\n}\n\n```\n(需要添加配置文件)\nMETA-INF/services/com.qianli.cashmama.pay.service.callback.receive.AbstractCallBackReceiveService\n```\ncom.qianli.cashmama.pay.service.callback.receive.CallBackReceivePaymentService\ncom.qianli.cashmama.pay.service.callback.receive.CallBackReceiveRepaymentService\ncom.qianli.cashmama.pay.service.callback.receive.CallBackReceiveAuthService\ncom.qianli.cashmama.pay.service.callback.receive.CallBackReceiveWithholdService\n\n```\n# 第四种方式 @PostConstruct 自己维护Map\n\n```Java\n public static Map<AcceptTypeEnum, AbstractCallBackSendService> handlers = new HashMap<AcceptTypeEnum, AbstractCallBackSendService>();\n```\n\n```java\n@Service\npublic class CallBackSendPaymentService extends AbstractCallBackSendService {\n\n    @Autowired\n    POrderPrePaymentDao pOrderPrePaymentDao;\n\n    @PostConstruct\n    public void init() {\n        CallBackSendService.handlers.put(AcceptTypeEnum.ACCEPT_TYPE_PAYMENT, this);\n    }\n}\n```\n","source":"_posts/接口与实现类动态切换的四种方式.md","raw":"---\ntitle: 接口与实现类动态切换的四种方式\ndate: 2019-11-11 16:31:49\ntags:\n---\n\n# 第一种方式 Spring Map注入方式\n```java\npublic interface QuotaService {\n\n    /**\n     * 评估额度\n     * @param quotaRequest\n     * @return\n     */\n    QuotaResponse evaluateQuota(QuotaRequest quotaRequest);\n}\n```\n```java\n@Service(\"mockQuotaService\")\npublic class MockQuotaServiceImpl implements QuotaService\n```\n```java\n@Service(\"riskQuotaService\")\npublic class RiskQuotaServiceImpl implements QuotaService\n```\n如何使用\n```java\n\n    @Autowired\n    Map<String, QuotaService> quotaServiceMap;  \n\n   QuotaResponse quota = quotaServiceMap.get(apolloConfigUtil.getQuotaServiceName()).evaluateQuota(quotaRequest);\n\n```\n# 第二种方式 Spring Bean ApplicationContext\n\n```java\npublic interface BaseProcesser {\n    /**\n     * 获取支付类型\n     * @return\n     */\n    PaymentChannelEnum getPayType();\n\n}\n```\n\n```java\n@Service\npublic class PayChannelMappingFactory implements ApplicationContextAware{\n\n    //支付模版\n    private Map<PaymentChannelEnum, BasePayProcesser> payProcesserMap;\n\n    //支付模版\n    public BasePayProcesser getPayProcessor(PaymentChannelEnum payType){\n        return payProcesserMap.get(payType);\n    }\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        Map payMap = applicationContext.getBeansOfType(BasePayProcesser.class);\n        payProcesserMap = new HashMap<PaymentChannelEnum,BasePayProcesser>(payMap.size());\n        for(Object object:payMap.values()){\n            BasePayProcesser processor = (BasePayProcesser)object;\n            payProcesserMap.put(processor.getPayType(),processor);\n        }\n    }\n}\n```\n# 第三种方式 Java Spi \n\n```java\npublic class CallBackMappingFactory {\n\n    private static ConcurrentHashMap<String, MethodManager> methodMappings = new ConcurrentHashMap<>();\n\n    private volatile static boolean init = false;\n\n    private CallBackMappingFactory(){\n    }\n\n\n    private static void initHandlerMethod() {\n        ServiceLoader<AbstractCallBackReceiveService> baseMethodManagers = ServiceLoader.load(AbstractCallBackReceiveService.class);\n        for(AbstractCallBackReceiveService abstractCallBackReceiveService :baseMethodManagers){\n            Method[] methods = abstractCallBackReceiveService.getClass().getDeclaredMethods();\n            for (Method method : methods) {\n                MethodMapping methodMapping = method.getAnnotation(MethodMapping.class);\n                if (methodMapping != null && methodMapping.value() != null) {\n\n                    String mapping = methodMapping.value();\n                    addMethodMapping(mapping, new MethodManager(StringUtils.uncapitalize(abstractCallBackReceiveService.getClass().getSimpleName()),method));\n                }\n            }\n        }\n    }\n\n    private static void addMethodMapping(String mapping, MethodManager methodManager) {\n        methodMappings.put(mapping, methodManager);\n\n    }\n\n    public static MethodManager getMethodMapping(String url) {\n\n        if(!init){\n            initHandlerMethod();\n            init = true;\n        }\n        return methodMappings.get(url);\n    }\n}\n\n```\n(需要添加配置文件)\nMETA-INF/services/com.qianli.cashmama.pay.service.callback.receive.AbstractCallBackReceiveService\n```\ncom.qianli.cashmama.pay.service.callback.receive.CallBackReceivePaymentService\ncom.qianli.cashmama.pay.service.callback.receive.CallBackReceiveRepaymentService\ncom.qianli.cashmama.pay.service.callback.receive.CallBackReceiveAuthService\ncom.qianli.cashmama.pay.service.callback.receive.CallBackReceiveWithholdService\n\n```\n# 第四种方式 @PostConstruct 自己维护Map\n\n```Java\n public static Map<AcceptTypeEnum, AbstractCallBackSendService> handlers = new HashMap<AcceptTypeEnum, AbstractCallBackSendService>();\n```\n\n```java\n@Service\npublic class CallBackSendPaymentService extends AbstractCallBackSendService {\n\n    @Autowired\n    POrderPrePaymentDao pOrderPrePaymentDao;\n\n    @PostConstruct\n    public void init() {\n        CallBackSendService.handlers.put(AcceptTypeEnum.ACCEPT_TYPE_PAYMENT, this);\n    }\n}\n```\n","slug":"接口与实现类动态切换的四种方式","published":1,"updated":"2020-04-21T08:27:37.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck99qxmj40004wuoz83vrgtk0","content":"<h1 id=\"第一种方式-Spring-Map注入方式\"><a href=\"#第一种方式-Spring-Map注入方式\" class=\"headerlink\" title=\"第一种方式 Spring Map注入方式\"></a>第一种方式 Spring Map注入方式</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">QuotaService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 评估额度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> quotaRequest</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">QuotaResponse <span class=\"title\">evaluateQuota</span><span class=\"params\">(QuotaRequest quotaRequest)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"mockQuotaService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MockQuotaServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">QuotaService</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"riskQuotaService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RiskQuotaServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">QuotaService</span></span></span><br></pre></td></tr></table></figure>\n<p>如何使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span></span><br><span class=\"line\"> Map&lt;String, QuotaService&gt; quotaServiceMap;  </span><br><span class=\"line\"></span><br><span class=\"line\">QuotaResponse quota = quotaServiceMap.get(apolloConfigUtil.getQuotaServiceName()).evaluateQuota(quotaRequest);</span><br></pre></td></tr></table></figure>\n<h1 id=\"第二种方式-Spring-Bean-ApplicationContext\"><a href=\"#第二种方式-Spring-Bean-ApplicationContext\" class=\"headerlink\" title=\"第二种方式 Spring Bean ApplicationContext\"></a>第二种方式 Spring Bean ApplicationContext</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BaseProcesser</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取支付类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">PaymentChannelEnum <span class=\"title\">getPayType</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PayChannelMappingFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//支付模版</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;PaymentChannelEnum, BasePayProcesser&gt; payProcesserMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//支付模版</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BasePayProcesser <span class=\"title\">getPayProcessor</span><span class=\"params\">(PaymentChannelEnum payType)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> payProcesserMap.get(payType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        Map payMap = applicationContext.getBeansOfType(BasePayProcesser.class);</span><br><span class=\"line\">        payProcesserMap = <span class=\"keyword\">new</span> HashMap&lt;PaymentChannelEnum,BasePayProcesser&gt;(payMap.size());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Object object:payMap.values())&#123;</span><br><span class=\"line\">            BasePayProcesser processor = (BasePayProcesser)object;</span><br><span class=\"line\">            payProcesserMap.put(processor.getPayType(),processor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"第三种方式-Java-Spi\"><a href=\"#第三种方式-Java-Spi\" class=\"headerlink\" title=\"第三种方式 Java Spi\"></a>第三种方式 Java Spi</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallBackMappingFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ConcurrentHashMap&lt;String, MethodManager&gt; methodMappings = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> init = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">CallBackMappingFactory</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initHandlerMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ServiceLoader&lt;AbstractCallBackReceiveService&gt; baseMethodManagers = ServiceLoader.load(AbstractCallBackReceiveService.class);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(AbstractCallBackReceiveService abstractCallBackReceiveService :baseMethodManagers)&#123;</span><br><span class=\"line\">            Method[] methods = abstractCallBackReceiveService.getClass().getDeclaredMethods();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Method method : methods) &#123;</span><br><span class=\"line\">                MethodMapping methodMapping = method.getAnnotation(MethodMapping.class);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (methodMapping != <span class=\"keyword\">null</span> &amp;&amp; methodMapping.value() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    String mapping = methodMapping.value();</span><br><span class=\"line\">                    addMethodMapping(mapping, <span class=\"keyword\">new</span> MethodManager(StringUtils.uncapitalize(abstractCallBackReceiveService.getClass().getSimpleName()),method));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addMethodMapping</span><span class=\"params\">(String mapping, MethodManager methodManager)</span> </span>&#123;</span><br><span class=\"line\">        methodMappings.put(mapping, methodManager);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MethodManager <span class=\"title\">getMethodMapping</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!init)&#123;</span><br><span class=\"line\">            initHandlerMethod();</span><br><span class=\"line\">            init = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> methodMappings.get(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(需要添加配置文件)<br>META-INF/services/com.qianli.cashmama.pay.service.callback.receive.AbstractCallBackReceiveService</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.qianli.cashmama.pay.service.callback.receive.CallBackReceivePaymentService</span><br><span class=\"line\">com.qianli.cashmama.pay.service.callback.receive.CallBackReceiveRepaymentService</span><br><span class=\"line\">com.qianli.cashmama.pay.service.callback.receive.CallBackReceiveAuthService</span><br><span class=\"line\">com.qianli.cashmama.pay.service.callback.receive.CallBackReceiveWithholdService</span><br></pre></td></tr></table></figure>\n<h1 id=\"第四种方式-PostConstruct-自己维护Map\"><a href=\"#第四种方式-PostConstruct-自己维护Map\" class=\"headerlink\" title=\"第四种方式 @PostConstruct 自己维护Map\"></a>第四种方式 @PostConstruct 自己维护Map</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;AcceptTypeEnum, AbstractCallBackSendService&gt; handlers = <span class=\"keyword\">new</span> HashMap&lt;AcceptTypeEnum, AbstractCallBackSendService&gt;();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallBackSendPaymentService</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCallBackSendService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    POrderPrePaymentDao pOrderPrePaymentDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CallBackSendService.handlers.put(AcceptTypeEnum.ACCEPT_TYPE_PAYMENT, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第一种方式-Spring-Map注入方式\"><a href=\"#第一种方式-Spring-Map注入方式\" class=\"headerlink\" title=\"第一种方式 Spring Map注入方式\"></a>第一种方式 Spring Map注入方式</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">QuotaService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 评估额度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> quotaRequest</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">QuotaResponse <span class=\"title\">evaluateQuota</span><span class=\"params\">(QuotaRequest quotaRequest)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"mockQuotaService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MockQuotaServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">QuotaService</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"riskQuotaService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RiskQuotaServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">QuotaService</span></span></span><br></pre></td></tr></table></figure>\n<p>如何使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">@Autowired</span></span><br><span class=\"line\"> Map&lt;String, QuotaService&gt; quotaServiceMap;  </span><br><span class=\"line\"></span><br><span class=\"line\">QuotaResponse quota = quotaServiceMap.get(apolloConfigUtil.getQuotaServiceName()).evaluateQuota(quotaRequest);</span><br></pre></td></tr></table></figure>\n<h1 id=\"第二种方式-Spring-Bean-ApplicationContext\"><a href=\"#第二种方式-Spring-Bean-ApplicationContext\" class=\"headerlink\" title=\"第二种方式 Spring Bean ApplicationContext\"></a>第二种方式 Spring Bean ApplicationContext</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BaseProcesser</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取支付类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">PaymentChannelEnum <span class=\"title\">getPayType</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PayChannelMappingFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//支付模版</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;PaymentChannelEnum, BasePayProcesser&gt; payProcesserMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//支付模版</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BasePayProcesser <span class=\"title\">getPayProcessor</span><span class=\"params\">(PaymentChannelEnum payType)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> payProcesserMap.get(payType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        Map payMap = applicationContext.getBeansOfType(BasePayProcesser.class);</span><br><span class=\"line\">        payProcesserMap = <span class=\"keyword\">new</span> HashMap&lt;PaymentChannelEnum,BasePayProcesser&gt;(payMap.size());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Object object:payMap.values())&#123;</span><br><span class=\"line\">            BasePayProcesser processor = (BasePayProcesser)object;</span><br><span class=\"line\">            payProcesserMap.put(processor.getPayType(),processor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"第三种方式-Java-Spi\"><a href=\"#第三种方式-Java-Spi\" class=\"headerlink\" title=\"第三种方式 Java Spi\"></a>第三种方式 Java Spi</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallBackMappingFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ConcurrentHashMap&lt;String, MethodManager&gt; methodMappings = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> init = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">CallBackMappingFactory</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initHandlerMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ServiceLoader&lt;AbstractCallBackReceiveService&gt; baseMethodManagers = ServiceLoader.load(AbstractCallBackReceiveService.class);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(AbstractCallBackReceiveService abstractCallBackReceiveService :baseMethodManagers)&#123;</span><br><span class=\"line\">            Method[] methods = abstractCallBackReceiveService.getClass().getDeclaredMethods();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Method method : methods) &#123;</span><br><span class=\"line\">                MethodMapping methodMapping = method.getAnnotation(MethodMapping.class);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (methodMapping != <span class=\"keyword\">null</span> &amp;&amp; methodMapping.value() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    String mapping = methodMapping.value();</span><br><span class=\"line\">                    addMethodMapping(mapping, <span class=\"keyword\">new</span> MethodManager(StringUtils.uncapitalize(abstractCallBackReceiveService.getClass().getSimpleName()),method));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addMethodMapping</span><span class=\"params\">(String mapping, MethodManager methodManager)</span> </span>&#123;</span><br><span class=\"line\">        methodMappings.put(mapping, methodManager);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MethodManager <span class=\"title\">getMethodMapping</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!init)&#123;</span><br><span class=\"line\">            initHandlerMethod();</span><br><span class=\"line\">            init = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> methodMappings.get(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(需要添加配置文件)<br>META-INF/services/com.qianli.cashmama.pay.service.callback.receive.AbstractCallBackReceiveService</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.qianli.cashmama.pay.service.callback.receive.CallBackReceivePaymentService</span><br><span class=\"line\">com.qianli.cashmama.pay.service.callback.receive.CallBackReceiveRepaymentService</span><br><span class=\"line\">com.qianli.cashmama.pay.service.callback.receive.CallBackReceiveAuthService</span><br><span class=\"line\">com.qianli.cashmama.pay.service.callback.receive.CallBackReceiveWithholdService</span><br></pre></td></tr></table></figure>\n<h1 id=\"第四种方式-PostConstruct-自己维护Map\"><a href=\"#第四种方式-PostConstruct-自己维护Map\" class=\"headerlink\" title=\"第四种方式 @PostConstruct 自己维护Map\"></a>第四种方式 @PostConstruct 自己维护Map</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;AcceptTypeEnum, AbstractCallBackSendService&gt; handlers = <span class=\"keyword\">new</span> HashMap&lt;AcceptTypeEnum, AbstractCallBackSendService&gt;();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallBackSendPaymentService</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCallBackSendService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    POrderPrePaymentDao pOrderPrePaymentDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CallBackSendService.handlers.put(AcceptTypeEnum.ACCEPT_TYPE_PAYMENT, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}